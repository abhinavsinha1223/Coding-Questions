Given N activities with their start and finish day given in array start[ ] and end[ ]. Select the maximum number of activities that can be performed by a single person, assuming that a person can only work on a single activity at a given day.
Note : Duration of the activity includes both starting and ending day.


Example 1:

Input:
N = 2
start[] = {2, 1}
end[] = {2, 2}
Output: 
1
Explanation:
A person can perform only one of the
given activities.



class Solution
{
   //Function to find the maximum number of activities that can
   //be performed by a single person.
   static class Pair implements Comparable<Pair>
   {
       int start;
       int end;
       Pair(int start,int end)
       {
           this.start=start;
           this.end=end;
       }
       public int compareTo(Pair p)
       {
           return this.end-p.end;
       }
   }
   public static int activitySelection(int start[], int end[], int n)
   {
       // add your code here
       ArrayList<Pair> a=new ArrayList<>();
       int count=1;
       for(int i=0;i<n;i++)
       {
           Pair p1=new Pair(start[i],end[i]);
           a.add(p1);
       }
       Collections.sort(a);
       int prev=a.get(0).end;
       for(int i=1;i<start.length;i++)
       {
           if(a.get(i).start>prev)
           {count++;
           prev=a.get(i).end;
           }
       }
       return count;
   }
}
